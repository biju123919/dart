trigger:
  - main

# pr: TEST PR
#   branches:
#     exclude:
#       - '*'

resources:
  repositories:
    - repository: azureSharedTemplates
      type: github
      endpoint: ACREnterprise
      name: ACREnterprise/ADOCS-templates
      branch: master

extends:
  template: shared-template.yml@azureSharedTemplates #Refer to the resources section repo 1)
  # Below are parameters needed for shared template
  parameters:
    #parameters to set build version
    buildVersionMajor: 1
    buildVersionMinor: 0
    buildPoolImage: "windows-latest"
    buildSteps:
      - checkout: self
      - powershell: |
            $prNumber = "$(system.pullRequest.pullRequestNumber)"
            Write-Host "GitHub Pull Request Number: $prNumber"
            Write-Host "##vso[build.updatebuildnumber]1.0-PullRequest.$prNumber"
            Write-Host "##vso[task.setvariable variable=buildVersion;]1.0-PullRequest.$prNumber"
        condition: eq(variables['Build.Reason'], 'PullRequest')
        displayName: SetPRBuildVersion

      - task: CmdLine@2
        displayName: "Install angular CLI"
        inputs:
          script: "npm install -g @angular/cli"

      - task: Npm@1
        displayName: "Install NPM packages using CI"
        inputs:
          command: "ci"
          verbose: true
          customEndpoint: "acr-npm-group Nexus Repository-DART"

      - task: CmdLine@2
        displayName: "Build Angular Project"
        inputs:
          script: "ng build --configuration=production --output-path $(Build.Artifactstagingdirectory)/WebApp"

      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/CloudformationTemplates'
          Contents: '**'
          TargetFolder: '$(Build.Artifactstagingdirectory)/CloudformationTemplates'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/Parameters'
          Contents: '**'
          TargetFolder: '$(Build.Artifactstagingdirectory)/Parameters'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: 'package.json'
          TargetFolder: '$(Build.Artifactstagingdirectory)'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: 'package-lock.json'
          TargetFolder: '$(Build.Artifactstagingdirectory)'
      - task: CmdLine@2
        displayName: Create nuget spec file .nuspec
        inputs:
          script: "nuget.exe spec ACR.DART.WebApp"
          workingDirectory: "$(Build.ArtifactStagingDirectory)"

      #Create Package
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: "6.x"

      - task: NuGetCommand@2
        displayName: Pack Nuget package
        inputs:
          command: "pack"
          packagesToPack: "$(Build.ArtifactStagingDirectory)/*.nuspec"
          packDestination: "$(Build.SourcesDirectory)/nupkg"
          versioningScheme: "byEnvVar"
          versionEnvVar: "BUILD_BUILDNUMBER"

      #Push Package

      - task: NuGetCommand@2
        inputs:
          command: "push"
          packagesToPush: "$(Build.SourcesDirectory)/nupkg/*.nupkg;!$(Build.SourcesDirectory)/nupkg/**/*.symbols.nupkg"
          nuGetFeedType: "external"
          publishFeedCredentials: "ACR Nexus with ApiKey-DART"
      
      - task: pipeline-triggerer-task@0
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        inputs:
          adoServiceConnection: Azure DevOps API for triggering release from build pipeline-DART
          Project: '0d9d4c3f-9f6e-4015-8e5e-93f1bdfcd186'
          PipelineType: Release
          ReleaseDefinition: DART Frontend Release
          Async: true

      - task: ArchiveFiles@2
        displayName: Create ZIP archive for build output
        inputs:
          rootFolderOrFile: "$(Build.Artifactstagingdirectory)"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.Artifactstagingdirectory)/buildArtifacts.$(Build.BuildNumber).zip" # Give ZIP file name appended with build number
          replaceExistingArchive: true
      - publish: $(Build.Artifactstagingdirectory)/buildArtifacts.$(Build.BuildNumber).zip
        artifact: buildArtifacts

      # Added tasks for testing, publishing results, and code coverage
      # - task: Npm@1
      #   displayName: Run Unit Test
      #   inputs:
      #     command: custom
      #     workingDir: ''
      #     verbose: false
      #     customCommand: 'run test-headless'
      #   continueOnError: true

      # - task: PublishTestResults@2
      #   displayName: 'Publish Test Results'
      #   inputs:
      #     testResultsFormat: 'JUnit'
      #     testResultsFiles: '$(Build.SourcesDirectory)/test_results/TESTS-results.xml'

      # - task: PublishCodeCoverageResults@1
      #   displayName: 'Publish code coverage from $(Build.SourcesDirectory)/coverage/**/*cobertura-coverage.xml'
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: '$(Build.SourcesDirectory)/coverage/**/*cobertura-coverage.xml'



      #Run Checkmarx and IQ scan

    securityScanAgentPool: 'Local Agents'
    runCheckMarxScan: true
    CheckmarxServiceConnection: 'ACR Checkmarx'
    CheckmarxProject: 'acrdart-front-end'
    CheckmarxCustomPreset: 'ACR Default'
    CheckmarxFullTeamName: 'CxServer\SOC\ACR\All\Informatics\DART'
    CheckmarxFolderExclusion: 'cvs, .svn, .hg , .git, .bzr, bin , obj,  backup, .idea, node_modules'
    runIQScan: true
    NexusServiceConnection: 'ACR Nexus IQ'
    NexusAppId: 'acrdart-front-end'
    NexusScanStage: 'Build'
    ArtifactsForNexusScan: '' 
    NexusScanTarget: '$(Build.SourcesDirectory)/Nexus/**/**.zip'
